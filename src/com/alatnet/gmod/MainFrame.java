/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alatnet.gmod;

import com.alatnet.gmod.logHandlers.JTextAreaHandler;
import com.alatnet.gmod.queue.*;
import com.alatnet.gmod.tableModels.*;
import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author alatnet
 */
public class MainFrame extends javax.swing.JFrame {
    private static JTextAreaHandler MainFrameLogArea;
    private JFileChooser fileChooser;
    private static FileNameExtensionFilter imageFileFilter = new FileNameExtensionFilter("JPG or JPEG Images [.jpg,.jpeg]", "jpg", "jpeg");
    private static FileNameExtensionFilter gmaFileFilter = new FileNameExtensionFilter("Gmod Archive [.gma]", "gma");
    private ArrayList<javax.swing.JCheckBox> tagsChkBoxes;
    
    private gmpuQueueRoot queueRoot=null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initComponents2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeButtonGroup = new javax.swing.ButtonGroup();
        typeButtonGroup = new javax.swing.ButtonGroup();
        tagsButtonGroup = new javax.swing.ButtonGroup();
        tagsButtonGroup.add(chkFun);
        tagsButtonGroup.add(chkRoleplay);
        tagsButtonGroup.add(chkScenic);
        tagsButtonGroup.add(chkMovie);
        tagsButtonGroup.add(chkRealism);
        tagsButtonGroup.add(chkCartoon);
        tagsButtonGroup.add(chkWater);
        tagsButtonGroup.add(chkComic);
        tagsButtonGroup.add(chkBuild);
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LogTxtArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JRadioButton();
        btnUpdate = new javax.swing.JRadioButton();
        btnExtract = new javax.swing.JRadioButton();
        btnCreateGMA = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        txtCreateFileFolder = new javax.swing.JTextField();
        btnCreateFile = new javax.swing.JButton();
        btnCreateFolder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCreateIcon = new javax.swing.JTextField();
        btnCreateIcon = new javax.swing.JButton();
        pnlIconPreview = new javax.swing.JPanel();
        lblIconPreview = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtAddonTitle = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        btnGamemode = new javax.swing.JRadioButton();
        btnMap = new javax.swing.JRadioButton();
        btnWeapon = new javax.swing.JRadioButton();
        btnVehicle = new javax.swing.JRadioButton();
        btnNPC = new javax.swing.JRadioButton();
        btnTool = new javax.swing.JRadioButton();
        btnEffects = new javax.swing.JRadioButton();
        btnModel = new javax.swing.JRadioButton();
        btnServerContent = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        chkFun = new javax.swing.JCheckBox();
        chkRoleplay = new javax.swing.JCheckBox();
        chkScenic = new javax.swing.JCheckBox();
        chkCartoon = new javax.swing.JCheckBox();
        chkRealism = new javax.swing.JCheckBox();
        chkMovie = new javax.swing.JCheckBox();
        chkBuild = new javax.swing.JCheckBox();
        chkComic = new javax.swing.JCheckBox();
        chkWater = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtAddonIgnore = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAddonList = new javax.swing.JTable();
        txtGMAOut = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnGMAOut = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtUpdateChanges = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblQueue = new javax.swing.JTable();
        btnQueueExecute = new javax.swing.JButton();
        btnQueueClear = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtExtractFile = new javax.swing.JTextField();
        btnExtractFile = new javax.swing.JButton();
        chkExtractOut = new javax.swing.JCheckBox();
        txtExtractOut = new javax.swing.JTextField();
        btnExtractOutFolder = new javax.swing.JButton();
        btnAddQueue = new javax.swing.JButton();
        btnSettings = new javax.swing.JButton();

        modeButtonGroup.add(btnCreate);
        modeButtonGroup.add(btnCreateGMA);
        modeButtonGroup.add(btnUpdate);
        modeButtonGroup.add(btnExtract);

        typeButtonGroup.add(btnGamemode);
        typeButtonGroup.add(btnMap);
        typeButtonGroup.add(btnWeapon);
        typeButtonGroup.add(btnVehicle);
        typeButtonGroup.add(btnNPC);
        typeButtonGroup.add(btnTool);
        typeButtonGroup.add(btnEffects);
        typeButtonGroup.add(btnModel);
        typeButtonGroup.add(btnServerContent);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GMod Publishing Utility");
        setName("MainFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        LogTxtArea.setEditable(false);
        LogTxtArea.setColumns(20);
        LogTxtArea.setRows(5);
        jScrollPane2.setViewportView(LogTxtArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Mode"));

        btnCreate.setSelected(true);
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeSelectActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeSelectActionPerformed(evt);
            }
        });

        btnExtract.setText("Extract");
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeSelectActionPerformed(evt);
            }
        });

        btnCreateGMA.setText("Create GMA");
        btnCreateGMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateGMA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExtract))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnCreate)
                .addComponent(btnUpdate)
                .addComponent(btnExtract)
                .addComponent(btnCreateGMA))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Create\\Create GMA\\Update"));

        btnCreateFile.setText("File");
        btnCreateFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFileActionPerformed(evt);
            }
        });

        btnCreateFolder.setText("Folder");
        btnCreateFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFolderActionPerformed(evt);
            }
        });

        jLabel1.setText("File or Folder: ");

        jLabel2.setText("Icon:");

        txtCreateIcon.setEditable(false);
        txtCreateIcon.setColumns(30);
        txtCreateIcon.setRequestFocusEnabled(false);

        btnCreateIcon.setText("Load");
        btnCreateIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateIconActionPerformed(evt);
            }
        });

        pnlIconPreview.setBorder(javax.swing.BorderFactory.createTitledBorder("Icon Preview"));

        lblIconPreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIconPreview.setText("No Preview");
        lblIconPreview.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlIconPreviewLayout = new javax.swing.GroupLayout(pnlIconPreview);
        pnlIconPreview.setLayout(pnlIconPreviewLayout);
        pnlIconPreviewLayout.setHorizontalGroup(
            pnlIconPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIconPreviewLayout.createSequentialGroup()
                .addComponent(lblIconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlIconPreviewLayout.setVerticalGroup(
            pnlIconPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblIconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Addon.json"));

        jLabel3.setText("Title: ");

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Type"));

        btnGamemode.setText("Gamemode");

        btnMap.setText("Map");

        btnWeapon.setText("Weapon");

        btnVehicle.setText("Vehicle");

        btnNPC.setText("NPC");

        btnTool.setText("Tool");

        btnEffects.setText("Effects");

        btnModel.setText("Model");

        btnServerContent.setText("Server Content");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnGamemode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWeapon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVehicle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(btnNPC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTool)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEffects)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnServerContent)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGamemode)
                    .addComponent(btnMap)
                    .addComponent(btnWeapon)
                    .addComponent(btnVehicle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNPC)
                    .addComponent(btnTool)
                    .addComponent(btnEffects)
                    .addComponent(btnModel)
                    .addComponent(btnServerContent)))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Tags"));

        chkFun.setText("Fun");
        chkFun.setName("fun"); // NOI18N
        chkFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkRoleplay.setText("Roleplay");
        chkRoleplay.setName("roleplay"); // NOI18N
        chkRoleplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkScenic.setText("Scenic");
        chkScenic.setName("scenic"); // NOI18N
        chkScenic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkCartoon.setText("Cartoon");
        chkCartoon.setName("cartoon"); // NOI18N
        chkCartoon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkRealism.setText("Realism");
        chkRealism.setName("realism"); // NOI18N
        chkRealism.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkMovie.setText("Movie");
        chkMovie.setName("movie"); // NOI18N
        chkMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkBuild.setText("Build");
        chkBuild.setName("build"); // NOI18N
        chkBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkComic.setText("Comic");
        chkComic.setName("comic"); // NOI18N
        chkComic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        chkWater.setText("Water");
        chkWater.setName("water"); // NOI18N
        chkWater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(chkFun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkRoleplay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkScenic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMovie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkRealism))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(chkCartoon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkWater)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkComic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkBuild))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkFun)
                    .addComponent(chkRoleplay)
                    .addComponent(chkScenic)
                    .addComponent(chkMovie)
                    .addComponent(chkRealism))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCartoon)
                    .addComponent(chkWater)
                    .addComponent(chkComic)
                    .addComponent(chkBuild)))
        );

        jLabel4.setText("Ignore: ");

        txtAddonIgnore.setText("\"*.psd\", \"*.vcproj\", \"*.svn*\"");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAddonTitle))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAddonIgnore)))
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAddonTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAddonIgnore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Addon List"));

        tblAddonList.setModel(new tableModelAddons());
        tblAddonList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAddonList.setSurrendersFocusOnKeystroke(true);
        tblAddonList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                tblAddonListSelect(e);
            }
        });
        jScrollPane3.setViewportView(tblAddonList);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
        );

        jLabel6.setText("GMA Output: ");

        btnGMAOut.setText("Select");
        btnGMAOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGMAOutActionPerformed(evt);
            }
        });

        jLabel7.setText("Changes: ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCreateFileFolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateFolder))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlIconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCreateIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateIcon))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUpdateChanges))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGMAOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGMAOut))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCreateFileFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateFolder)
                    .addComponent(btnCreateFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCreateIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateIcon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlIconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtUpdateChanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtGMAOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGMAOut)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Queue"));

        tblQueue.setModel(new tableModelQueue());
        jScrollPane4.setViewportView(tblQueue);

        btnQueueExecute.setText("Execute");
        btnQueueExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueueExecuteActionPerformed(evt);
            }
        });

        btnQueueClear.setText("Clear");
        btnQueueClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueueClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnQueueExecute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnQueueClear)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQueueExecute)
                    .addComponent(btnQueueClear))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Extract"));

        jLabel5.setText("File: ");

        btnExtractFile.setText("File");
        btnExtractFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractFileActionPerformed(evt);
            }
        });

        chkExtractOut.setText("Out: ");
        chkExtractOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExtractOutActionPerformed(evt);
            }
        });

        btnExtractOutFolder.setText("Folder");
        btnExtractOutFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractOutFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtExtractFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExtractFile))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(chkExtractOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtExtractOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExtractOutFolder)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtExtractFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExtractFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkExtractOut)
                    .addComponent(txtExtractOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExtractOutFolder)))
        );

        btnAddQueue.setText("Add to Queue");
        btnAddQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQueueActionPerformed(evt);
            }
        });

        btnSettings.setText("Settings");
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnSettings)
                            .addGap(355, 355, 355)
                            .addComponent(btnAddQueue))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSettings)
                            .addComponent(btnAddQueue)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    private void initComponents2() {
        this.fileChooser = new JFileChooser();
        //btnCreate;
        //btnUpdate;
        this.btnCreateFile.setEnabled(true);
        this.btnCreateFolder.setEnabled(true);
        this.btnCreateIcon.setEnabled(true);
        this.btnEffects.setEnabled(true);
        this.btnGamemode.setEnabled(true);
        this.btnMap.setEnabled(true);
        this.btnModel.setEnabled(true);
        this.btnNPC.setEnabled(true);
        this.btnTool.setEnabled(true);
        this.btnVehicle.setEnabled(true);
        this.btnWeapon.setEnabled(true);
        this.btnServerContent.setEnabled(true);
        this.chkBuild.setEnabled(true);
        this.chkCartoon.setEnabled(true);
        this.chkComic.setEnabled(true);
        this.chkFun.setEnabled(true);
        this.chkMovie.setEnabled(true);
        this.chkRealism.setEnabled(true);
        this.chkRoleplay.setEnabled(true);
        this.chkScenic.setEnabled(true);
        this.chkWater.setEnabled(true);
        this.tblAddonList.setEnabled(false);
        this.txtAddonIgnore.setEnabled(true);
        this.txtAddonTitle.setEnabled(true);
        this.txtCreateFileFolder.setEnabled(true);
        this.txtCreateIcon.setEnabled(true);
        this.txtGMAOut.setEnabled(false);
        this.btnGMAOut.setEnabled(false);
        this.txtUpdateChanges.setEditable(false);
        //btnExtract;
        this.txtExtractFile.setEnabled(false);
        this.txtExtractOut.setEnabled(false);
        this.btnExtractFile.setEnabled(false);
        this.btnExtractOutFolder.setEnabled(false);
        this.chkExtractOut.setEnabled(false);
        
        MainFrameLogArea = new JTextAreaHandler(this.LogTxtArea);
        GmodPublishingUtility.gmpuLogger.addHandler(MainFrameLogArea);
        GmodPublishingUtility.gmpuLogger.log(Level.CONFIG, "Logging Initiallized.");
        
        new Thread(){
            @Override
            public void run(){
                gmpuJob listItems = new gmpuJob(gmpuJob.LIST);
                try {
                    listItems.call();
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                tableModelAddons tblModel = (tableModelAddons) tblAddonList.getModel();

                for (int i=0;i<listItems.listReturn.size();i++){
                    gmpuJob.listEntry listEntry = listItems.listReturn.get(i);
                    tblModel.addRow(listEntry.ID,listEntry.Name);
                }
            }
        }.start();
        
        /*gmpuJob listItems = new gmpuJob(gmpuJob.LIST);
        listItems.run();
        
        tableModelAddons tblModel = (tableModelAddons) this.tblAddonList.getModel();
        
        for (int i=0;i<listItems.listReturn.size();i++){
            gmpuJob.listEntry listEntry = listItems.listReturn.get(i);
            tblModel.addRow(new tableModelAddons.addonsRowData(listEntry.ID,listEntry.Name));
        }*/
        //String id = (String) this.tblAddonList.getValueAt(this.tblAddonList.getSelectedRow(), 0);
        
        this.tagsChkBoxes = new ArrayList<>();
        this.tagsChkBoxes.add(this.chkBuild);
        this.tagsChkBoxes.add(this.chkCartoon);
        this.tagsChkBoxes.add(this.chkComic);
        this.tagsChkBoxes.add(this.chkFun);
        this.tagsChkBoxes.add(this.chkMovie);
        this.tagsChkBoxes.add(this.chkRealism);
        this.tagsChkBoxes.add(this.chkRoleplay);
        this.tagsChkBoxes.add(this.chkScenic);
        this.tagsChkBoxes.add(this.chkWater);
        
        this.tblQueue.getSelectionModel().addListSelectionListener(new tblQueueListSelectionListener());
    }
    
    private class tblQueueListSelectionListener implements ListSelectionListener{
        @Override
        public void valueChanged(ListSelectionEvent lse) {
            if (tblQueue.getSelectedRows().length==0) btnQueueClear.setText("Clear");
            else btnQueueClear.setText("Remove");
        }
    }
    
    private void setTagsEnabled(boolean enabled){
        this.chkBuild.setEnabled(enabled);
        this.chkCartoon.setEnabled(enabled);
        this.chkComic.setEnabled(enabled);
        this.chkFun.setEnabled(enabled);
        this.chkMovie.setEnabled(enabled);
        this.chkRealism.setEnabled(enabled);
        this.chkRoleplay.setEnabled(enabled);
        this.chkScenic.setEnabled(enabled);
        this.chkWater.setEnabled(enabled);
    }
    
    private void setTagsSelected(boolean selected){
        this.chkBuild.setSelected(selected);
        this.chkCartoon.setSelected(selected);
        this.chkComic.setSelected(selected);
        this.chkFun.setSelected(selected);
        this.chkMovie.setSelected(selected);
        this.chkRealism.setSelected(selected);
        this.chkRoleplay.setSelected(selected);
        this.chkScenic.setSelected(selected);
        this.chkWater.setSelected(selected);
    }
    
    private void setTypeEnabled(boolean enabled){
        this.btnEffects.setEnabled(enabled);
        this.btnGamemode.setEnabled(enabled);
        this.btnMap.setEnabled(enabled);
        this.btnModel.setEnabled(enabled);
        this.btnNPC.setEnabled(enabled);
        this.btnTool.setEnabled(enabled);
        this.btnVehicle.setEnabled(enabled);
        this.btnWeapon.setEnabled(enabled);
        this.btnServerContent.setEnabled(enabled);
    }
    
    private void setTypeSelected(boolean selected){
        this.btnEffects.setSelected(selected);
        this.btnGamemode.setSelected(selected);
        this.btnMap.setSelected(selected);
        this.btnModel.setSelected(selected);
        this.btnNPC.setSelected(selected);
        this.btnTool.setSelected(selected);
        this.btnVehicle.setSelected(selected);
        this.btnWeapon.setSelected(selected);
        this.btnServerContent.setSelected(selected);
    }
    
    private void setAddonJsonEnabled(boolean enabled){
        setTagsEnabled(enabled);
        setTypeEnabled(enabled);
        this.txtAddonTitle.setEnabled(enabled);
        this.txtAddonIgnore.setEnabled(enabled);
    }
    
    private void modeSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeSelectActionPerformed
        if (this.btnCreate.isSelected()){
            //btnCreate;
            //btnUpdate;
            this.btnCreateFile.setEnabled(true);
            this.btnCreateFolder.setEnabled(true);
            this.btnCreateIcon.setEnabled(true);
            this.txtUpdateChanges.setEnabled(false);
            setAddonJsonEnabled(true);
            this.tblAddonList.setEnabled(false);
            this.txtCreateFileFolder.setEnabled(true);
            this.txtCreateIcon.setEnabled(true);
            this.txtGMAOut.setEnabled(false);
            this.btnGMAOut.setEnabled(false);
            this.txtUpdateChanges.setEditable(false);
            //btnExtract;
            this.txtExtractFile.setEnabled(false);
            this.txtExtractOut.setEnabled(false);
            this.txtExtractFile.setText("");
            this.txtExtractOut.setText("");
            this.btnExtractFile.setEnabled(false);
            this.btnExtractOutFolder.setEnabled(false);
            this.chkExtractOut.setEnabled(false);
            this.chkExtractOut.setSelected(false);
            
            this.lblIconPreview.setText("No Preview.");
            this.lblIconPreview.setIcon(null);
            this.txtCreateIcon.setText("");
            
            this.tblAddonList.clearSelection();
            setTypeSelected(false);
            setTagsSelected(false);
            this.txtCreateFileFolder.setText("");
            this.txtAddonTitle.setText("");
            this.txtUpdateChanges.setText("");
            this.txtGMAOut.setText("");
        }else if (this.btnUpdate.isSelected()){
            //btnCreate;
            //btnUpdate;
            this.btnCreateFile.setEnabled(true);
            this.btnCreateFolder.setEnabled(true);
            this.btnCreateIcon.setEnabled(false);
            this.txtUpdateChanges.setEnabled(true);
            setAddonJsonEnabled(true);
            this.tblAddonList.setEnabled(true);
            this.txtCreateFileFolder.setEnabled(true);
            this.txtCreateIcon.setEnabled(false);
            this.txtGMAOut.setEnabled(false);
            this.btnGMAOut.setEnabled(false);
            this.txtUpdateChanges.setEditable(true);
            //btnExtract;
            this.txtExtractFile.setEnabled(false);
            this.txtExtractOut.setEnabled(false);
            this.txtExtractFile.setText("");
            this.txtExtractOut.setText("");
            this.btnExtractFile.setEnabled(false);
            this.btnExtractOutFolder.setEnabled(false);
            this.chkExtractOut.setEnabled(false);
            this.chkExtractOut.setSelected(false);
            
            this.tblAddonList.clearSelection();
            setTypeSelected(false);
            setTagsSelected(false);
            this.txtCreateFileFolder.setText("");
            this.txtAddonTitle.setText("");
            this.txtUpdateChanges.setText("");
            this.txtGMAOut.setText("");
        }else if (this.btnExtract.isSelected()){
            //btnCreate;
            //btnUpdate;
            this.btnCreateFile.setEnabled(false);
            this.btnCreateFolder.setEnabled(false);
            this.btnCreateIcon.setEnabled(false);
            this.txtUpdateChanges.setEnabled(false);
            setAddonJsonEnabled(false);
            this.tblAddonList.setEnabled(false);
            this.txtCreateFileFolder.setEnabled(false);
            this.txtCreateIcon.setEnabled(false);
            this.txtGMAOut.setEnabled(false);
            this.btnGMAOut.setEnabled(false);
            this.txtUpdateChanges.setEditable(false);
            //btnExtract;
            this.txtExtractFile.setEnabled(true);
            this.txtExtractOut.setEnabled(false);
            this.txtExtractFile.setText("");
            this.txtExtractOut.setText("");
            this.btnExtractFile.setEnabled(true);
            this.btnExtractOutFolder.setEnabled(false);
            this.chkExtractOut.setEnabled(true);
            this.chkExtractOut.setSelected(false);
            
            this.lblIconPreview.setText("No Preview.");
            this.lblIconPreview.setIcon(null);
            this.txtCreateIcon.setText("");
            
            this.tblAddonList.clearSelection();
            setTypeSelected(false);
            setTagsSelected(false);
            this.txtCreateFileFolder.setText("");
            this.txtAddonTitle.setText("");
            this.txtUpdateChanges.setText("");
            this.txtGMAOut.setText("");
        }else if (this.btnCreateGMA.isSelected()){
            //btnCreate;
            //btnUpdate;
            this.btnCreateFile.setEnabled(false);
            this.btnCreateFolder.setEnabled(true);
            this.btnCreateIcon.setEnabled(false);
            this.txtUpdateChanges.setEnabled(false);
            setAddonJsonEnabled(true);
            this.tblAddonList.setEnabled(false);
            this.txtCreateFileFolder.setEnabled(true);
            this.txtCreateIcon.setEnabled(false);
            this.txtGMAOut.setEnabled(true);
            this.btnGMAOut.setEnabled(true);
            this.txtUpdateChanges.setEditable(false);
            //btnExtract;
            this.txtExtractFile.setEnabled(false);
            this.txtExtractOut.setEnabled(false);
            this.txtExtractFile.setText("");
            this.txtExtractOut.setText("");
            this.btnExtractFile.setEnabled(false);
            this.btnExtractOutFolder.setEnabled(false);
            this.chkExtractOut.setEnabled(false);
            this.chkExtractOut.setSelected(false);
            
            this.lblIconPreview.setText("No Preview.");
            this.lblIconPreview.setIcon(null);
            this.txtCreateIcon.setText("");
            
            this.tblAddonList.clearSelection();
            setTypeSelected(false);
            setTagsSelected(false);
            this.txtCreateFileFolder.setText("");
            this.txtAddonTitle.setText("");
            this.txtUpdateChanges.setText("");
            this.txtGMAOut.setText("");
        }
    }//GEN-LAST:event_modeSelectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        GmodPublishingUtility.saveSettings();
        MainFrameLogArea.close();
    }//GEN-LAST:event_formWindowClosing

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        Settings settings = new Settings(this,true);
        settings.setPathsData(GmodPublishingUtility.gmpublishPath, GmodPublishingUtility.gmpublish, GmodPublishingUtility.gmadPath, GmodPublishingUtility.gmad);
        settings.setBooleanData(GmodPublishingUtility.convertFilenames, GmodPublishingUtility.openBrowserOnCreate, GmodPublishingUtility.Q_autoRemoveCompleted, GmodPublishingUtility.SQ_autoRemoveCompleted, GmodPublishingUtility.useSmartQueue,GmodPublishingUtility.SQ_uploadRetryDelayE);
        settings.setSpinData(GmodPublishingUtility.SQ_uploadDelay, GmodPublishingUtility.SQ_numThreads, GmodPublishingUtility.SQ_uploadRetryTimes,GmodPublishingUtility.SQ_uploadRetryDelayI);
        settings.setLookAndFeelData(GmodPublishingUtility.useJavaLAF, GmodPublishingUtility.javaLAF);
        settings.setVisible(true);
        GmodPublishingUtility.gmad = settings.getGmadProgram();
        GmodPublishingUtility.gmadPath = settings.getGmadPath();
        GmodPublishingUtility.gmpublish = settings.getGmpublishProgram();
        GmodPublishingUtility.gmpublishPath = settings.getGmpublishPath();
        GmodPublishingUtility.convertFilenames=settings.getConvertFileNames();
        GmodPublishingUtility.openBrowserOnCreate=settings.getOpenBrowserOnCreate();
        GmodPublishingUtility.Q_autoRemoveCompleted=settings.getQueueAutoRemove();
        GmodPublishingUtility.SQ_autoRemoveCompleted=settings.getSQueueAutoRemove();
        GmodPublishingUtility.useSmartQueue=settings.getSQueueEnable();
        GmodPublishingUtility.SQ_uploadDelay=settings.getSQueueDelay();
        GmodPublishingUtility.SQ_numThreads=settings.getSQueueNumThreads();
        GmodPublishingUtility.SQ_uploadRetryTimes=settings.getSQueueRetry();
        GmodPublishingUtility.useJavaLAF = settings.getJLAF_Enabled();
        GmodPublishingUtility.javaLAF = settings.getJLAF_Text();
        GmodPublishingUtility.SQ_uploadRetryDelayE=settings.getSQueueUploadRetryDelayE();
        GmodPublishingUtility.SQ_uploadRetryDelayI=settings.getSQueueUploadRetryDelayI();
        
        if (settings.pathsPressedOK()){
            new Thread(){
                @Override
                public void run(){
                    gmpuJob listItems = new gmpuJob(gmpuJob.LIST);
                    try {
                        listItems.call();
                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    tableModelAddons tblModel = (tableModelAddons) tblAddonList.getModel();
                    tblModel.clearData();

                    for (int i=0;i<listItems.listReturn.size();i++){
                        gmpuJob.listEntry listEntry = listItems.listReturn.get(i);
                        tblModel.addRow(listEntry.ID,listEntry.Name);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void chkExtractOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExtractOutActionPerformed
        if (this.chkExtractOut.isSelected()){
            this.txtExtractOut.setEnabled(true);
            this.btnExtractOutFolder.setEnabled(true);
            this.txtExtractOut.setText("");
        }else{
            this.txtExtractOut.setEnabled(false);
            this.btnExtractOutFolder.setEnabled(false);
            this.txtExtractOut.setText("");
        }
    }//GEN-LAST:event_chkExtractOutActionPerformed

    private void btnCreateIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateIconActionPerformed
        this.fileChooser.setDialogTitle("Choose addon icon.");
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileFilter(imageFileFilter);
        this.fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            try {
                GmodPublishingUtility.gmpuLogger.log(Level.INFO, "Image for icon selected. Loading and Checking Image...");
                BufferedImage image = ImageIO.read(this.fileChooser.getSelectedFile());
                
                if (image.getWidth()==512 && image.getHeight()==512){
                    GmodPublishingUtility.gmpuLogger.log(Level.INFO, "Image is 512x512.  Loading preview...");
                    this.txtCreateIcon.setText(this.fileChooser.getSelectedFile().getPath());
                    
                    int type = image.getType() == 0? BufferedImage.TYPE_INT_ARGB : image.getType();
                    BufferedImage resizedImage = new BufferedImage(128,128,type);
                    Graphics2D g = resizedImage.createGraphics();
                    g.setComposite(AlphaComposite.Src);
                    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
                    g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
                    g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
                    g.drawImage(image, 0, 0, 128, 128, null);
                    g.dispose();
                
                    this.lblIconPreview.setIcon(new ImageIcon(resizedImage));
                
                    this.lblIconPreview.setText("");
                    GmodPublishingUtility.gmpuLogger.log(Level.INFO, "Preview Loaded.");
                }else{
                    GmodPublishingUtility.gmpuLogger.log(Level.WARNING, "Image is not 512x512!");
                    this.lblIconPreview.setText("Image not 512x512!");
                    this.lblIconPreview.setIcon(null);
                    this.txtCreateIcon.setText("");
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                GmodPublishingUtility.gmpuLogger.log(Level.SEVERE, "Error Loading Image.");
            }
        }
    }//GEN-LAST:event_btnCreateIconActionPerformed

    private void tagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagsActionPerformed
        checkTags();
    }//GEN-LAST:event_tagsActionPerformed

    private void btnCreateFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFileActionPerformed
        this.fileChooser.setDialogTitle("Choose Gmod archive file.");
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileFilter(gmaFileFilter);
        this.fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            this.txtCreateFileFolder.setText(this.fileChooser.getSelectedFile().getPath());
            setAddonJsonEnabled(false);
        }
    }//GEN-LAST:event_btnCreateFileActionPerformed

    private void btnCreateFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFolderActionPerformed
        this.fileChooser.setDialogTitle("Choose addon folder.");
        this.fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.fileChooser.setFileFilter(null);
        this.fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            this.txtCreateFileFolder.setText(this.fileChooser.getSelectedFile().getPath());
            setAddonJsonEnabled(true);
        }
    }//GEN-LAST:event_btnCreateFolderActionPerformed

    private void btnGMAOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGMAOutActionPerformed
        this.fileChooser.setDialogTitle("Choose where to save GMA file.");
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileFilter(gmaFileFilter);
        this.fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            String gmaOutStr = this.fileChooser.getSelectedFile().getPath();
            if (!gmaOutStr.endsWith(".gma")) gmaOutStr+=".gma";
            this.txtGMAOut.setText(gmaOutStr);
        }
    }//GEN-LAST:event_btnGMAOutActionPerformed

    private void btnExtractFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractFileActionPerformed
        this.fileChooser.setDialogTitle("Choose Gmod archive file.");
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        this.fileChooser.setFileFilter(gmaFileFilter);
        this.fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            this.txtExtractFile.setText(this.fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnExtractFileActionPerformed

    private void btnExtractOutFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractOutFolderActionPerformed
        this.fileChooser.setDialogTitle("Choose extraction output folder.");
        this.fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.fileChooser.setFileFilter(null);
        this.fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        if (this.fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            this.txtExtractOut.setText(this.fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnExtractOutFolderActionPerformed

    private String getAddonType(){
        if (this.btnEffects.isSelected()) return "effects";
        else if (this.btnGamemode.isSelected()) return "gamemode";
        else if (this.btnMap.isSelected()) return "map";
        else if (this.btnModel.isSelected()) return "model";
        else if (this.btnNPC.isSelected()) return "npc";
        else if (this.btnTool.isSelected()) return "tool";
        else if (this.btnVehicle.isSelected()) return "vehicle";
        else if (this.btnWeapon.isSelected()) return "weapon";
        else if (this.btnServerContent.isSelected()) return "servercontent";
        return "";
    }
    
    private addon_json createJson(){
        addon_json ret = new addon_json();
        ret.ignore = this.txtAddonIgnore.getText();            
        int tagIndex=0;
        for (int i=0;i<this.tagsChkBoxes.size();i++){
            if (tagIndex>=2) break;
            if (this.tagsChkBoxes.get(i).isSelected()){
                ret.tags[tagIndex] = this.tagsChkBoxes.get(i).getName();
                tagIndex++;
            }
        }

        ret.title=this.txtAddonTitle.getText();
        ret.type=getAddonType();
        return ret;
    }
    
    private void btnAddQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQueueActionPerformed
        boolean addonSelectedUpdate = false;
        gmpuJob job=null;
        if (this.btnCreate.isSelected()){
            job = new gmpuJob(gmpuJob.CREATE);
            String addon = this.txtCreateFileFolder.getText();
            if (addon.endsWith(".gma")) job.createGmaOut = addon;
            else{
                job.addonJson = createJson();
                job.createGmaFolder = addon;
            }
            job.createIcon = this.txtCreateIcon.getText();
        }else if (this.btnCreateGMA.isSelected()){
            job = new gmpuJob(gmpuJob.CREATE_GMA);
            job.addonJson = createJson();
            job.createGmaFolder = this.txtCreateFileFolder.getText();
            job.createGmaOut = this.txtGMAOut.getText();
        }else if (this.btnUpdate.isSelected()){
            job = new gmpuJob(gmpuJob.UPDATE);
            String addon = this.txtCreateFileFolder.getText();
            if (addon.endsWith(".gma")) job.createGmaOut = addon;
            else{
                job.addonJson = createJson();
                job.createGmaFolder = addon;
            }
            int selectedRow = this.tblAddonList.getSelectedRow();
            if (selectedRow !=-1){
                job.updateID=(String) this.tblAddonList.getValueAt(selectedRow, 0);
                addonSelectedUpdate=true;
            }
            job.updateChanges=this.txtUpdateChanges.getText();
            
            // Save settings to file
            Properties workshopProps = new Properties();
            workshopProps.setProperty("title", this.txtAddonTitle.getText());
            workshopProps.setProperty("type", getAddonType());
            for (int i=0;i<this.tagsChkBoxes.size();i++){
                workshopProps.setProperty("tag_" + this.tagsChkBoxes.get(i).getName().toLowerCase(), String.valueOf(this.tagsChkBoxes.get(i).isSelected()));
            }
            workshopProps.setProperty("ignore", this.txtAddonIgnore.getText());
            workshopProps.setProperty("folder", this.txtCreateFileFolder.getText());
            OutputStream output = null;
            try {
                output = new FileOutputStream("data/" + ((String) this.tblAddonList.getValueAt(selectedRow, 0)) + ".properties");
		workshopProps.store(output, null);
            } catch (IOException io) {
                    io.printStackTrace();
            } finally {
                    if (output != null) {
                            try {
                                    output.close();
                            } catch (IOException e) {
                                    e.printStackTrace();
                            }
                    }

            }
        }else if (this.btnExtract.isSelected()){
            job = new gmpuJob(gmpuJob.EXTRACT);
            job.extractName = this.txtExtractFile.getText();
            if (this.chkExtractOut.isSelected()) job.extractOut = this.txtExtractOut.getText();
        }
        
        if (job != null){
            int jobType = job.getJobType();
            switch(jobType){
                case gmpuJob.UPDATE:
                    if (!addonSelectedUpdate){
                        JOptionPane.showMessageDialog(this,"Error!\nNo addon selected for update!","No Addon Selected",JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                case gmpuJob.CREATE:
                    if (jobType == gmpuJob.CREATE && this.txtCreateIcon.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this,"Error!\nNo icon selected!","No Icon Selected",JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                case gmpuJob.CREATE_GMA:
                    if (jobType == gmpuJob.CREATE_GMA && this.txtGMAOut.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this,"Error!\nNo output file selected!","No Output File",JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    if (this.txtCreateFileFolder.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this,"Error!\nNo file or folder selected!","No File or Folder",JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    if (job.addonJson != null){
                        switch(job.addonJson.checkData()){
                            case addon_json.CHK_OK:
                                ((tableModelQueue)this.tblQueue.getModel()).addJob(job);
                                break;
                            case addon_json.CHK_TITLE: //title is empty
                                JOptionPane.showMessageDialog(this,"Error!\nTitle in addon.json section is empty!","Empty Title",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TYPE_A: //type is empty
                                JOptionPane.showMessageDialog(this,"Error!\nNo type selected in addon.json section!","No Type",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TYPE_B: //type is wrong
                                JOptionPane.showMessageDialog(this,"Error!\nIncorrect type selected in addon.json section!","Incorrect Type",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TAGS_A: //tags are empty
                                JOptionPane.showMessageDialog(this,"Error!\nNo tags selected in addon.json section!","No Tags",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TAGS_B_1: //first tag is wrong
                                JOptionPane.showMessageDialog(this,"Error!\nIncorrect first tag selected in addon.json section!","First Tag Incorrect",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TAGS_B_2: //second tag is wrong
                                JOptionPane.showMessageDialog(this,"Error!\nIncorrect second tag selected in addon.json section!","Second Tag Incorrect",JOptionPane.ERROR_MESSAGE);
                                break;
                            case addon_json.CHK_TAGS_B_3: //both tags are wrong
                                JOptionPane.showMessageDialog(this,"Error!\nIncorrect tags selected in addon.json section!","Incorrect Tags",JOptionPane.ERROR_MESSAGE);
                                break;
                        }
                    }else ((tableModelQueue)this.tblQueue.getModel()).addJob(job);
                    break;
                case gmpuJob.EXTRACT:
                    if (this.txtExtractFile.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this,"Error!\nNo file or folder selected for extraction!","No File or Folder for Extract",JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                default:
                    ((tableModelQueue)this.tblQueue.getModel()).addJob(job);
                    break;
            }
        }
    }//GEN-LAST:event_btnAddQueueActionPerformed

    private void btnQueueClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueueClearActionPerformed
        int rows[] = tblQueue.getSelectedRows();
        tableModelQueue model = (tableModelQueue)this.tblQueue.getModel();
        
        if (model.getRowCount()!=0){
            if (rows.length==0) model.clearData();//while (model.getRowCount()>0) model.removeRow(0); //clear the list
            else{
                for (int i=rows.length-1;i>=0;i--) model.removeRow(rows[i]); //remove selected
                this.tblQueue.clearSelection();
            }
        }
    }//GEN-LAST:event_btnQueueClearActionPerformed

    //private boolean queueRunning = false;
    private void btnQueueExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueueExecuteActionPerformed
        //if (!this.queueRunning){
        /*if (this.queueRoot==null){
            if (GmodPublishingUtility.useSmartQueue){
                queueRoot = new gmpuSmartQueue((DefaultTableModel)this.tblQueue.getModel(),(DefaultTableModel)this.tblAddonList.getModel());
            }else{
                queueRoot = new gmpuQueue((DefaultTableModel)this.tblQueue.getModel(),(DefaultTableModel)this.tblAddonList.getModel());
            }
            queueRoot.start();
            this.btnQueueExecute.setText("Stop");
        }else{
            //stop queue;
            this.queueRoot.stopQueue();
            this.btnQueueExecute.setText("Execute");
        }*/
        
        if (this.queueRoot==null || !this.queueRoot.isAlive()){
            if (GmodPublishingUtility.useSmartQueue){
                this.queueRoot = new gmpuSmartQueue((tableModelQueue)this.tblQueue.getModel(), (tableModelAddons)this.tblAddonList.getModel());
                this.queueRoot.setQueueBtn(this.btnQueueExecute);
            }else{
                this.queueRoot = new gmpuQueue((tableModelQueue)this.tblQueue.getModel(), (tableModelAddons)this.tblAddonList.getModel());
                this.queueRoot.setQueueBtn(this.btnQueueExecute);
            }
            this.queueRoot.start();
            this.btnQueueExecute.setText("Stop");
        }else{
            this.queueRoot.stopQueue();
            this.btnQueueExecute.setText("Execute");
        }
    }//GEN-LAST:event_btnQueueExecuteActionPerformed
    
    private void checkTags(){
        int numTagsSelected=0;
        
        for (int i=0 ;i<this.tagsChkBoxes.size();i++){
            if (this.tagsChkBoxes.get(i).isSelected()) numTagsSelected++;
            if (numTagsSelected>=2) break;
        }
        
        if (numTagsSelected >= 2){
            for (int i=0 ;i<this.tagsChkBoxes.size();i++) if (!this.tagsChkBoxes.get(i).isSelected()) this.tagsChkBoxes.get(i).setEnabled(false);
        }else{
            for (int i=0 ;i<this.tagsChkBoxes.size();i++) this.tagsChkBoxes.get(i).setEnabled(true);
        }
    }
    
    private void tblAddonListSelect(ListSelectionEvent ev){
        System.out.println(ev.getValueIsAdjusting());
        if (!ev.getValueIsAdjusting()) {
            int i = ((DefaultListSelectionModel)ev.getSource()).getAnchorSelectionIndex();
            tableModelAddons addonList = (tableModelAddons) tblAddonList.getModel();
            if (i>=0 && i<addonList.getRowCount()){
                String workshopID = (String)addonList.getValueAt(i, 0);
                Properties workshopProps = new Properties();
                InputStream input = null;
                try {
                    input = new FileInputStream("data/" + workshopID + ".properties");
                    workshopProps.load(input);
                    txtAddonTitle.setText(workshopProps.getProperty("title"));
                    String type = workshopProps.getProperty("type").toLowerCase();
                    if (null != type) switch (type) {
                        case "effects":
                            btnEffects.setSelected(true);
                            break;
                        case "gamemode":
                            btnGamemode.setSelected(true);
                            break;
                        case "map":
                            btnMap.setSelected(true);
                            break;
                        case "model":
                            btnModel.setSelected(true);
                            break;
                        case "npc":
                            btnNPC.setSelected(true);
                            break;
                        case "tool":
                            btnTool.setSelected(true);
                            break;
                        case "vehicle":
                            btnVehicle.setSelected(true);
                            break;
                        case "weapon":
                            btnWeapon.setSelected(true);
                            break;
                        case "servercontent":
                            btnServerContent.setSelected(true);
                            break;
                        default:
                            break;
                    }
                    for (int j=0;j<this.tagsChkBoxes.size();j++){
                        boolean value = Boolean.parseBoolean(workshopProps.getProperty("tag_" + this.tagsChkBoxes.get(j).getName().toLowerCase()));
                        tagsChkBoxes.get(j).setSelected(value);
                    }
                    txtAddonIgnore.setText(workshopProps.getProperty("ignore"));
                    txtCreateFileFolder.setText(workshopProps.getProperty("folder"));
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (input != null) {
			try {
                            input.close();
			} catch (IOException e) {
                            e.printStackTrace();
			}
                    }
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea LogTxtArea;
    private javax.swing.JButton btnAddQueue;
    private javax.swing.JRadioButton btnCreate;
    private javax.swing.JButton btnCreateFile;
    private javax.swing.JButton btnCreateFolder;
    private javax.swing.JRadioButton btnCreateGMA;
    private javax.swing.JButton btnCreateIcon;
    private javax.swing.JRadioButton btnEffects;
    private javax.swing.JRadioButton btnExtract;
    private javax.swing.JButton btnExtractFile;
    private javax.swing.JButton btnExtractOutFolder;
    private javax.swing.JButton btnGMAOut;
    private javax.swing.JRadioButton btnGamemode;
    private javax.swing.JRadioButton btnMap;
    private javax.swing.JRadioButton btnModel;
    private javax.swing.JRadioButton btnNPC;
    private javax.swing.JButton btnQueueClear;
    private javax.swing.JButton btnQueueExecute;
    private javax.swing.JRadioButton btnServerContent;
    private javax.swing.JButton btnSettings;
    private javax.swing.JRadioButton btnTool;
    private javax.swing.JRadioButton btnUpdate;
    private javax.swing.JRadioButton btnVehicle;
    private javax.swing.JRadioButton btnWeapon;
    private javax.swing.JCheckBox chkBuild;
    private javax.swing.JCheckBox chkCartoon;
    private javax.swing.JCheckBox chkComic;
    private javax.swing.JCheckBox chkExtractOut;
    private javax.swing.JCheckBox chkFun;
    private javax.swing.JCheckBox chkMovie;
    private javax.swing.JCheckBox chkRealism;
    private javax.swing.JCheckBox chkRoleplay;
    private javax.swing.JCheckBox chkScenic;
    private javax.swing.JCheckBox chkWater;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblIconPreview;
    private javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.JPanel pnlIconPreview;
    private javax.swing.ButtonGroup tagsButtonGroup;
    private javax.swing.JTable tblAddonList;
    private javax.swing.JTable tblQueue;
    private javax.swing.JTextField txtAddonIgnore;
    private javax.swing.JTextField txtAddonTitle;
    private javax.swing.JTextField txtCreateFileFolder;
    private javax.swing.JTextField txtCreateIcon;
    private javax.swing.JTextField txtExtractFile;
    private javax.swing.JTextField txtExtractOut;
    private javax.swing.JTextField txtGMAOut;
    private javax.swing.JTextField txtUpdateChanges;
    private javax.swing.ButtonGroup typeButtonGroup;
    // End of variables declaration//GEN-END:variables
}
